package librarymanagementsystem;

import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.text.DateFormatter;

public class Library {
	private LoginFrame loginFrame;
	private AdminBookFrame adminBookFrame;
	private AdminMemberFrame adminMemberFrame;

	private ArrayList<Book> books = new ArrayList<>();
	private ArrayList<Member> members = new ArrayList<>();
	private ArrayList<Admin> admins = new ArrayList<>();
	
	public void readBook() {
		File dummyBook = new File("resources/books.txt");
		try {
			Scanner scan = new Scanner(dummyBook);
			
			while(scan.hasNextLine()) {
				String[] line = scan.nextLine().split("#");
				
				books.add(new Book(line[0], line[1], Integer.parseInt(line[2]), Integer.parseInt(line[3]), line[4], line[5], line[6], Integer.parseInt(line[7])));
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void writeBook() {
		File dummyBook = new File("resources/books.txt");
		
		try {
			FileWriter printer = new FileWriter(dummyBook);

			for(Book book : books) {
				printer.write(String.format("%s#%s#%d#%d#%s#%s#%s\n", book.getName(), book.getAuthor(), book.getPublishYear(), book.getPages(), book.getIsbn(), book.getPublisher(), book.getSynopsis()));	
				System.out.println(book.getName());
			}
			
			printer.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void readMember() {
		File dummyMember = new File("resources/members.txt");
		
		try {
			Scanner scan = new Scanner(dummyMember);
			
			while(scan.hasNextLine()) {
				String[] line = scan.nextLine().split("\"");
				LocalDate date = LocalDate.parse(line[2]);
				
				members.add(new Member(line[0], line[1], date, line[3], line[4], line[5]));
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void writeMember() {
		DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("dd-MM-YYYY");
		File dummyMember = new File("resources/members2.txt");
		
		try {
			FileWriter printer = new FileWriter(dummyMember);

			for(Member member : members) {
				printer.write(String.format("%s\"%s\"%s\"%s\"%s\"%s\"%s\n", member.getId(), member.getName(), dateFormat.format(member.getBirthDate()), member.getEmail(), member.getPhoneNum(), member.getPhoneNum(), member.getPassword()));
			}
			
			printer.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public int checkAccount(String[] account) {
		for(Admin admin : admins) {
			if(account[0].equals(admin.getId()) && account[1].equals(admin.getPassword())) {
				return 1;
			}
		}
		
		for(Member member : members) {
			if(account[0].equals(member.getId()) && account[1].equals(member.getPassword())) {
				return 2;
			}
		}
		
		return 0;
	}
	
	public void addBook(String name, String author, int publishYear, int pages, String isbn, String publisher,
			String synopsis, int quantity) {
		books.add(new Book(name, author, publishYear, pages, isbn, publisher, synopsis, quantity));
	}
	
	public void removeBook(int selectedRow) {
		books.remove(selectedRow);
	}
	
	public void updateBook(int selectedRow, String name, String author, int publishYear, int pages, String isbn, String publisher,
			String synopsis, int quantity) {
		Book book = books.get(selectedRow);
		
		book.setName(name);
		book.setAuthor(author);
		book.setPublishYear(publishYear);
		book.setPages(pages);
		book.setIsbn(isbn);
		book.setPublisher(publisher);
		book.setSynopsis(synopsis);
		book.setQuantity(quantity);
		
		books.set(selectedRow, book);
	}
	
	public void addMember(String id, String name, LocalDate birthDate, String email, String phoneNum, String password) {
		members.add(new Member(id, name, birthDate, email, phoneNum, password));
	}
	
	public void removeMember(int selectedRow) {
		members.remove(selectedRow);
	}
	
	public void logout(JFrame frame, int width, int height) {
		frame.dispose();
		
		loginFrame = new LoginFrame(this, width, height);
	}
	
	public void loginAdmin(int width, int height, Point point) {
		loginFrame.dispose();
		
		adminBookFrame = new AdminBookFrame(this, width, height, point);
		adminBookFrame.setVisible(true);
	}
	
	public void changeFrame(JFrame dest, JFrame src) {
		
	}
	
	public Library() {
		admins.add(new Admin("ariya", "ariya"));
		admins.add(new Admin("fredy", "fredy"));
		admins.add(new Admin("neisya", "neisya"));
		
		readBook();
		readMember();
		loginFrame = new LoginFrame(this, 1280, 720);
	}
	
	public ArrayList<Book> getBooks() {
		return books;
	}

	public void setBooks(ArrayList<Book> books) {
		this.books = books;
	}

	public ArrayList<Member> getMembers() {
		return members;
	}

	public void setMembers(ArrayList<Member> members) {
		this.members = members;
	}

	public ArrayList<Admin> getAdmins() {
		return admins;
	}

	public void setAdmins(ArrayList<Admin> admins) {
		this.admins = admins;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new Library();
	}

}
