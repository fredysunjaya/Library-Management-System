package librarymanagementsystem;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;																																							
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class AdminBookFrame extends JFrame implements ActionListener {
	private Library library;
	
	// North
	private JPanel menubar = new JPanel();
	private JButton bookBtn = new JButton("Books", new ImageIcon("resources/bookIcon.png"));
	private JButton memberBtn = new JButton("Members", new ImageIcon("resources/membersIcon.png"));
	private JButton issuedBtn = new JButton("Issued Books", new ImageIcon("resources/issuedIcon.png"));
	private JButton recordBtn = new JButton("Records", new ImageIcon("resources/recordIcon.png"));
	private JButton logoutBtn = new JButton("Log Out", new ImageIcon("resources/logoutIcon.png"));
	
	// Center
	private JTable bookTable = new JTable();
	private Object[] bookColumn = {"ISBN", "Title", "Author", "Pages", "Publisher", "Publication Year", "Synopsis", "Quantity"};
	private JScrollPane bookScrollPane = new JScrollPane(bookTable);
	private DefaultTableModel dtmBook;
	
	// South
	private JPanel formPanel = new JPanel();
	private JPanel leftFormPanel = new JPanel();
	private JPanel rightFormPanel = new JPanel();
	private JPanel emptyPanel = new JPanel();
	
	// South West
	private JLabel isbnLbl = new JLabel("ISBN");
	private JTextField isbnTxt = new JTextField();
	private JLabel nameLbl = new JLabel("Title");
	private JTextField nameTxt = new JTextField();
	private JLabel authorLbl = new JLabel("Author");
	private JTextField authorTxt = new JTextField();
	private JLabel pagesLbl = new JLabel("Pages");
	private JTextField pagesTxt = new JTextField();
	private JLabel publisherLbl = new JLabel("Publisher");
	private JTextField publisherTxt = new JTextField();
	private JLabel publicationYearLbl = new JLabel("Publication Year");
	private JTextField publicationYearTxt = new JTextField();
	private JLabel synopsisLbl = new JLabel("Synopsis");
	private JTextArea synopsisArea = new JTextArea();
	private JScrollPane synopsisPane = new JScrollPane(synopsisArea);
	private JLabel quantityLbl = new JLabel("Quantity");
	private JTextField quantityTxt = new JTextField();
	
	// South east
	private JTextField searchTxt = new JTextField();
	private JButton searchBtn = new JButton("Search");
	private JButton addBtn = new JButton("Add");
	private JButton deleteBtn = new JButton("Delete");
	private JButton updateBtn = new JButton("Update");
	private JButton viewBtn = new JButton("View");
	
	public void loadTable(ArrayList<Book> books) {
		bookTable.getTableHeader().setReorderingAllowed(false);
		
		dtmBook = new DefaultTableModel(bookColumn, 0) {
			@Override
			public boolean isCellEditable(int row, int column) {
				// TODO Auto-generated method stub
				return false;
			}
		};
		
		for(Book book : books) {
			Object[] bookFile = {book.getIsbn(), book.getName(), book.getAuthor(), book.getPages(), book.getPublisher(), book.getPublishYear(), book.getSynopsis(), book.getQuantity()};
			
			dtmBook.addRow(bookFile);
		}
		bookTable.setModel(dtmBook);
	} 
	
	public void init_component(ArrayList<Book> books) {
		setLayout(new BorderLayout());
		
		GridBagLayout menubarLayout = new GridBagLayout();
		GridBagConstraints menubarConst = new GridBagConstraints();
		menubar.setLayout(menubarLayout);
		
		// Books button
		menubarConst.gridx = 0;
		menubarConst.weightx = 0.25;
		menubarConst.insets = new Insets(10, 0, 10, 0);
		bookBtn.addActionListener(this);
		bookBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
	    bookBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(bookBtn, menubarConst);
		
		// Members Button
		menubarConst.gridx++;
		memberBtn.addActionListener(this);
		memberBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
	    memberBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(memberBtn, menubarConst);
		
		// Issued Book Button
		menubarConst.gridx++;
		issuedBtn.addActionListener(this);
		issuedBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
	    issuedBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(issuedBtn, menubarConst);
		
		// Records of Issued Book Button
		menubarConst.gridx++;
		recordBtn.addActionListener(this);
		recordBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
	    recordBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(recordBtn, menubarConst);
		
		// Logout Button
		menubarConst.gridx++;
		logoutBtn.addActionListener(this);
		logoutBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
	    logoutBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(logoutBtn, menubarConst);
		
		// Table of Books
		loadTable(books);
		
		// Book's Form
		GridBagLayout formLayout = new GridBagLayout();
		GridBagConstraints formConst = new GridBagConstraints();
		formConst.fill = GridBagConstraints.HORIZONTAL;
		formPanel.setLayout(formLayout);
		
		// Left Form
		GridBagLayout leftFormLayout = new GridBagLayout();
		GridBagConstraints leftFormConst = new GridBagConstraints();
		leftFormPanel.setLayout(leftFormLayout);
		leftFormPanel.setBackground(Color.GRAY);
		
		// ISBN Label
		leftFormConst.gridx = 0;
		leftFormConst.gridy = 0;
		leftFormConst.weightx = 0.25;
		leftFormConst.ipady = 10;
		leftFormConst.insets = new Insets(15, 40, 5, 40);
		leftFormPanel.add(isbnLbl, leftFormConst);
		
		// ISBN text field
		leftFormConst.gridx++;
		leftFormConst.weightx = 0.75;
		leftFormConst.fill = GridBagConstraints.HORIZONTAL;
		leftFormPanel.add(isbnTxt, leftFormConst);
		
		// Title Label
		leftFormConst.gridx = 0;
		leftFormConst.gridy++;
		leftFormConst.weightx = 0.25;
		leftFormConst.insets = new Insets(5, 40, 5, 40);
		leftFormConst.fill = GridBagConstraints.NONE;
		leftFormPanel.add(nameLbl, leftFormConst);
		
		// Title text field
		leftFormConst.gridx++;
		leftFormConst.weightx = 0.75;
		leftFormConst.fill = GridBagConstraints.HORIZONTAL;
		leftFormPanel.add(nameTxt, leftFormConst);	
		
		// Author Label
		leftFormConst.gridx = 0;
		leftFormConst.gridy++;
		leftFormConst.weightx = 0.25;
		leftFormConst.fill = GridBagConstraints.NONE;
		leftFormPanel.add(authorLbl, leftFormConst);
		
		// Author text field
		leftFormConst.gridx++;
		leftFormConst.weightx = 0.75;
		leftFormConst.fill = GridBagConstraints.HORIZONTAL;
		leftFormPanel.add(authorTxt, leftFormConst);
	
		// Pages Label
		leftFormConst.gridx = 0;
		leftFormConst.gridy++;
		leftFormConst.weightx = 0.25;
		leftFormConst.fill = GridBagConstraints.NONE;
		leftFormPanel.add(pagesLbl, leftFormConst);
		
		// Pages field
		leftFormConst.gridx++;
		leftFormConst.weightx = 0.75;
		leftFormConst.fill = GridBagConstraints.HORIZONTAL;
		leftFormPanel.add(pagesTxt, leftFormConst);

		// Publisher Label
		leftFormConst.gridx = 0;
		leftFormConst.gridy++;
		leftFormConst.weightx = 0.25;
		leftFormConst.fill = GridBagConstraints.NONE;
		leftFormPanel.add(publisherLbl, leftFormConst);
		
		// Publisher field
		leftFormConst.gridx++;
		leftFormConst.weightx = 0.75;
		leftFormConst.fill = GridBagConstraints.HORIZONTAL;
		leftFormPanel.add(publisherTxt, leftFormConst);
		
		// Publication Year Label
		leftFormConst.gridx = 0;
		leftFormConst.gridy++;
		leftFormConst.weightx = 0.25;
		leftFormConst.fill = GridBagConstraints.NONE;
		leftFormPanel.add(publicationYearLbl, leftFormConst);
		
		// Publication Year field
		leftFormConst.gridx++;
		leftFormConst.weightx = 0.75;
		leftFormConst.fill = GridBagConstraints.HORIZONTAL;
		leftFormPanel.add(publicationYearTxt, leftFormConst);
		
		// Synopsis Label
		leftFormConst.gridx = 0;
		leftFormConst.gridy++;
		leftFormConst.weightx = 0.25;
		leftFormConst.anchor = GridBagConstraints.PAGE_START;
		leftFormConst.fill = GridBagConstraints.NONE;
		leftFormPanel.add(synopsisLbl, leftFormConst);
		
		// Synopsis field
		leftFormConst.gridx++;
		leftFormConst.ipady = 80;
		leftFormConst.weightx = 0.75;
		leftFormConst.fill = GridBagConstraints.HORIZONTAL;
			// line wrapping
		synopsisArea.setLineWrap(true);
			// word wrapping
		synopsisArea.setWrapStyleWord(true);
		leftFormPanel.add(synopsisPane, leftFormConst);
		
		// Quantity Label
		leftFormConst.gridx = 0;
		leftFormConst.gridy++;
		leftFormConst.weightx = 0.25;
		leftFormConst.ipady = 10;
		leftFormConst.insets = new Insets(5, 40, 15, 40);
		leftFormConst.anchor = GridBagConstraints.CENTER;
		leftFormConst.fill = GridBagConstraints.NONE;
		leftFormPanel.add(quantityLbl, leftFormConst);
		
		// Quantity field
		leftFormConst.gridx++;
		leftFormConst.weightx = 0.75;
		leftFormConst.fill = GridBagConstraints.HORIZONTAL;
		leftFormPanel.add(quantityTxt, leftFormConst);
	
		// Right Form
		GridBagLayout rightFormLayout = new GridBagLayout();
		GridBagConstraints rightFormConst = new GridBagConstraints();
		rightFormPanel.setLayout(rightFormLayout);
		rightFormPanel.setBackground(Color.GREEN);
		
		// Search Text Field
		rightFormConst.gridx = 0;
		rightFormConst.gridy = 0;
		rightFormConst.gridwidth = 2;
		rightFormConst.insets = new Insets(10, 30, 10, 20);
		rightFormConst.fill = GridBagConstraints.HORIZONTAL;
		rightFormPanel.add(searchTxt, rightFormConst);
		
		// Search Button
		rightFormConst.gridwidth = 1;
		rightFormConst.gridx = GridBagConstraints.RELATIVE;
		rightFormConst.fill = GridBagConstraints.NONE;
		rightFormPanel.add(searchBtn, rightFormConst);
		
		// Add Button
		rightFormConst.gridx = 0;
		rightFormConst.gridy++;
		rightFormConst.weightx = 1;
			// empty panel
		emptyPanel.setPreferredSize(new Dimension(0,0));
		rightFormPanel.add(emptyPanel, rightFormConst);
		rightFormConst.gridx++;
		rightFormConst.fill = GridBagConstraints.HORIZONTAL;
		rightFormConst.insets = new Insets(10, 25, 10, 25);
		addBtn.addActionListener(this);
		rightFormPanel.add(addBtn, rightFormConst);
		
		// Delete Button
		rightFormConst.gridx++;
		deleteBtn.addActionListener(this);
		rightFormPanel.add(deleteBtn, rightFormConst);
		
		// Update Button
		rightFormConst.gridx = 0;
		rightFormConst.gridy++;
			// empty panel		
		emptyPanel.setPreferredSize(new Dimension(0,0));
		rightFormPanel.add(emptyPanel, rightFormConst);
		rightFormConst.gridx++;
		updateBtn.addActionListener(this);
		rightFormPanel.add(updateBtn, rightFormConst);
		
		// View Button
		rightFormConst.gridx++;
		viewBtn.addActionListener(this);
		rightFormPanel.add(viewBtn, rightFormConst);

		bookTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {		
			@Override
			public void valueChanged(ListSelectionEvent e) {
				// TODO Auto-generated method stub
				int row = bookTable.getSelectedRow();
				
				if(row != -1) {
					isbnTxt.setText(bookTable.getValueAt(row, 0).toString());
					nameTxt.setText(bookTable.getValueAt(row, 1).toString());
					authorTxt.setText(bookTable.getValueAt(row, 2).toString());
					pagesTxt.setText(bookTable.getValueAt(row, 3).toString());
					publisherTxt.setText(bookTable.getValueAt(row, 4).toString());
					publicationYearTxt.setText(bookTable.getValueAt(row, 5).toString());
					synopsisArea.setText(bookTable.getValueAt(row, 6).toString());
					quantityTxt.setText(bookTable.getValueAt(row, 7).toString());					
				}
			}
		});
		
		formConst.weightx = 0.65;
		formPanel.add(leftFormPanel, formConst);
		formConst.weightx = 0.35;
		formPanel.add(rightFormPanel, formConst);
		
		add(menubar, "North");
		add(bookScrollPane, "Center");
		add(formPanel, "South");
	}
	
	public AdminBookFrame(Library library, int width, int height) {
		this.library = library;
		
		init_component(library.getBooks());
		setSize(width, height);
		setTitle("Library Management System");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
//		setVisible(true);
	}

	public AdminBookFrame() {
		// TODO Auto-generated constructor stub
	}

	public void resetForm() {
		nameTxt.setText("");
		authorTxt.setText("");
		publicationYearTxt.setText("");
		pagesTxt.setText("");
		isbnTxt.setText("");
		publisherTxt.setText("");
		synopsisArea.setText("");
		quantityTxt.setText("");
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getSource().equals(bookBtn)) {
			
		} else if(e.getSource().equals(memberBtn)) {
			this.setVisible(false);
			new AdminMemberFrame(library, getContentPane().getBounds().width, getContentPane().getBounds().height).setVisible(true);
		} else if(e.getSource().equals(issuedBtn)) {
			
		} else if(e.getSource().equals(recordBtn)) {
			
		} else if(e.getSource().equals(logoutBtn)) {
			library.logout(getContentPane().getBounds().width, getContentPane().getBounds().height);
			System.out.println(getContentPane().getSize().width);
			System.out.println(getContentPane().getBounds().width);
		} else if(e.getSource().equals(addBtn)) {
			String name = nameTxt.getText();
			String author = authorTxt.getText();
			int publishYear = Integer.parseInt(publicationYearTxt.getText());
			int pages = Integer.parseInt(pagesTxt.getText());
			String isbn = isbnTxt.getText();
			String publisher = publisherTxt.getText();
			String synopsis = synopsisArea.getText();
			int quantity = Integer.parseInt(quantityTxt.getText());
			Object[] row = {isbn, name, author, pages, publisher, publishYear, synopsis, quantity};
			
			library.addBook(name, author, publishYear, pages, isbn, publisher, synopsis, quantity);
			dtmBook.addRow(row);
			bookTable.invalidate();
			resetForm();
		} else if(e.getSource().equals(deleteBtn)) {
			int selectedRow = bookTable.getSelectedRow();
			
			if(selectedRow != -1) {
				resetForm();
				dtmBook.removeRow(selectedRow);
				library.removeBook(selectedRow);
				bookTable.invalidate();
			}
		} else if(e.getSource().equals(updateBtn)) {
			int selectedRow = bookTable.getSelectedRow();
			
			if(selectedRow != -1) {
				String name = nameTxt.getText();
				String author = authorTxt.getText();
				int publishYear = Integer.parseInt(publicationYearTxt.getText());
				int pages = Integer.parseInt(pagesTxt.getText());
				String isbn = isbnTxt.getText();
				String publisher = publisherTxt.getText();
				String synopsis = synopsisArea.getText();
				int quantity = Integer.parseInt(quantityTxt.getText());
				Object[] row = {isbn, name, author, pages, publisher, publishYear, synopsis, quantity};
				
				dtmBook.setValueAt(isbn, selectedRow, 0);
				dtmBook.setValueAt(name, selectedRow, 1);
				dtmBook.setValueAt(author, selectedRow, 2);
				dtmBook.setValueAt(pages, selectedRow, 3);
				dtmBook.setValueAt(publisher, selectedRow, 4);
				dtmBook.setValueAt(publishYear, selectedRow, 5);
				dtmBook.setValueAt(synopsis, selectedRow, 6);
				dtmBook.setValueAt(quantity, selectedRow, 7);
				library.updateBook(selectedRow, name, author, publishYear, pages, isbn, publisher, synopsis, quantity);
				
				resetForm();
				bookTable.invalidate();
			}
		} else if(e.getSource().equals(viewBtn)) {
			
		}
	}
}
