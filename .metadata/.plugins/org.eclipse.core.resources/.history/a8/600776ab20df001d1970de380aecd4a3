package librarymanagementsystem;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class MemberBookFrame extends JFrame implements ActionListener {
	private Library library;
	
	// North
	private JPanel menubar = new JPanel();
	private JButton bookBtn = new JButton("Books", new ImageIcon("resources/bookIcon.png"));
	private JButton issuedBtn = new JButton("Issued Books", new ImageIcon("resources/issuedIcon.png"));
	private JButton recordBtn = new JButton("Records", new ImageIcon("resources/recordIcon.png"));
	private JTextField searchTxt = new JTextField();
	private JButton searchBtn = new JButton("Search");
	private JButton resetBtn = new JButton("Reset");
	private JButton logoutBtn = new JButton("Log Out", new ImageIcon("resources/logoutIcon.png"));
	private JButton accountBtn = new JButton("Accounts", new ImageIcon("resources/accountIcon.png"));
	
	// Center
	private Object[] bookColumn = {"ISBN", "Title", "Author", "Pages", "Publisher", "Publication Year", "Synopsis", "Quantity"};
	private JTable bookTable = new JTable();
	private JScrollPane bookScrollPane = new JScrollPane(bookTable);
	private DefaultTableModel dtmBook;
	private DefaultTableModel dtmSearchBook;
	
	// South
	private JPanel southPanel = new JPanel();
	private JButton issueBtn = new JButton("Issue Book");
	private JButton viewBtn = new JButton("View Book");
	
	public void loadTable(ArrayList<Book> books) {
		bookTable.getTableHeader().setReorderingAllowed(false);
		bookTable.getTableHeader().setResizingAllowed(false);
		bookTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
		
		dtmBook = new DefaultTableModel(bookColumn, 0) {
			@Override
			public boolean isCellEditable(int row, int column) {
				// TODO Auto-generated method stub
				return false;
			}
		};
		
		for(Book book : books) {
			Object[] bookFile = {book.getIsbn(), book.getName(), book.getAuthor(), book.getPages(), book.getPublisher(), book.getPublishYear(), book.getSynopsis(), book.getQuantity()};
			
			dtmBook.addRow(bookFile);
		}
		bookTable.setModel(dtmBook);
	} 
	
	public void addData(String name, String author, int publishYear, int pages, String isbn, String publisher, String synopsis, int quantity) {
		Object[] row = {isbn, name, author, pages, publisher, publishYear, synopsis, quantity};
		library.addBook(name, author, publishYear, pages, isbn, publisher, synopsis, quantity);
		dtmBook.addRow(row);
		bookTable.invalidate();				
	}
	
	public void updateData(String name, String author, int publishYear, int pages, String isbn, String publisher, String synopsis, int quantity) {
		int selectedRow = library.searchBookPos(isbn);
		
		library.updateBook(selectedRow, name, author, publishYear, pages, isbn, publisher, synopsis, quantity);
		
		loadTable(library.getBooks());
		bookTable.setModel(dtmBook);
		bookTable.invalidate();
	}
	
	public void initComponent(ArrayList<Book> books) {
		setLayout(new BorderLayout());
		
		GridBagLayout menubarLayout = new GridBagLayout();
		GridBagConstraints menubarConst = new GridBagConstraints();
		menubar.setLayout(menubarLayout);
		
		// Books button
		menubarConst.gridx = 0;
		menubarConst.insets = new Insets(10, 30, 10, 5);
		bookBtn.addActionListener(this);
		bookBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
	    bookBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(bookBtn, menubarConst);
		
		// Issued Book Button
		menubarConst.insets = new Insets(10, 5, 10, 5);
		menubarConst.gridx++;
		issuedBtn.addActionListener(this);
		issuedBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
	    issuedBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(issuedBtn, menubarConst);
		
		// Records of Issued Book Button
		menubarConst.gridx++;
		recordBtn.addActionListener(this);
		recordBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
	    recordBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(recordBtn, menubarConst);
		
		// Search Text Field
		menubarConst.gridx++;
		menubarConst.weightx = 0.1;
		menubar.add(new JPanel(), menubarConst);
		menubarConst.gridx++;
		menubarConst.weightx = 0.75;
		menubarConst.fill = GridBagConstraints.HORIZONTAL;
		menubar.add(searchTxt, menubarConst);
		
		// Search Button
		menubarConst.gridx++;
		menubarConst.weightx = 0.025;
		menubarConst.fill = GridBagConstraints.NONE;
		menubar.add(searchBtn, menubarConst);
		
		// Reset Button
		menubarConst.weightx = 0.025;
		menubarConst.gridx++;
		menubar.add(resetBtn, menubarConst);
		menubarConst.weightx = 0.1;
		menubarConst.gridx++;
		menubar.add(new JPanel(), menubarConst);
		
		// Logout Button
		menubarConst.weightx = 0;
		menubarConst.gridx++;
		logoutBtn.addActionListener(this);
		logoutBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
	    logoutBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(logoutBtn, menubarConst);
		
		// Account Button
		menubarConst.insets = new Insets(10, 5, 10, 30);
		menubarConst.gridx++;
		accountBtn.addActionListener(this);
		accountBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
		accountBtn.setHorizontalTextPosition(SwingConstants.CENTER);
		menubar.add(accountBtn, menubarConst);
		
		// Table of Books
		loadTable(books);
		
		// South Panel
		GridBagLayout southLayout = new GridBagLayout();
		GridBagConstraints southConst = new GridBagConstraints();
		southPanel.setLayout(southLayout);
		
		// Add Button
		southConst.gridx = 0;
		southConst.gridy = 0;		
		southConst.insets = new Insets(20, 0, 30, 15);
		southConst.weightx = 1;
		southConst.anchor = GridBagConstraints.LINE_END;		
		issueBtn.addActionListener(this);
		southPanel.setBackground(Color.CYAN);
		southPanel.add(issueBtn, southConst);
	
		// View Button
		southConst.gridx++;
		southPanel.add(issueBtn, southConst);

		bookTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {		
			@Override
			public void valueChanged(ListSelectionEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
		add(menubar, "North");
		add(bookScrollPane, "Center");
		add(southPanel, "South");
	}
	
	public MemberBookFrame(Library library, int width, int height, Point point) {
		this.library = library;
		
		initComponent(library.getBooks());
		setSize(width, height);
		setTitle("Library Management System");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocation(point);
//		setVisible(true);
	}

	public MemberBookFrame() {
		// TODO Auto-generated constructor stub
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getSource().equals(bookBtn)) {
			
		} else if(e.getSource().equals(issuedBtn)) {
			Point point = getLocationOnScreen();
//			library.changeFrame(new AdminIssuedFrame(library, getWidth(), getHeight(), point, true), this);
			
		} else if(e.getSource().equals(recordBtn)) {
			Point point = getLocationOnScreen();
//			library.changeFrame(new AdminIssuedFrame(library, getWidth(), getHeight(), point, false), this);
			
		} else if(e.getSource().equals(logoutBtn)) {
			library.logout(this, getWidth(), getHeight());
			
		} else if(e.getSource().equals(accountBtn)) {
			Point point = getLocationOnScreen();
//			library.changeFrame(new AdminMemberFrame(library, getWidth(), getHeight(), point), this);
			
		} else if(e.getSource().equals(searchBtn)) {
			String searchValue = searchTxt.getText();
			
			if(!searchValue.equals("")) {
				dtmSearchBook = new DefaultTableModel(bookColumn, 0) {
					@Override
					public boolean isCellEditable(int row, int column) {
						// TODO Auto-generated method stub
						return false;
					}
				};
				ArrayList<Book> searchedBooks = library.filterBooks(searchValue);
				
				for(Book book : searchedBooks) {
					Object[] bookFile = {book.getIsbn(), book.getName(), book.getAuthor(), book.getPages(), book.getPublisher(), book.getPublishYear(), book.getSynopsis(), book.getQuantity()};
					dtmSearchBook.addRow(bookFile);
				}
				
				bookTable.setModel(dtmSearchBook);
				bookTable.invalidate();				
			}
		} else if(e.getSource().equals(resetBtn)) {
			if(!searchTxt.getText().equals("")) {
				bookTable.setModel(dtmBook);
				bookTable.invalidate();				
				searchTxt.setText("");
			}
		} else if(e.getSource().equals(viewBtn)) {
			int selectedRow = bookTable.getSelectedRow();
			
			if(selectedRow != -1) {
				setEnabled(false);
				ViewBookAdminFrame viewBookForm = new ViewBookAdminFrame(this, getWidth(), getHeight(), 
						library.searchBook(bookTable.getValueAt(selectedRow, 0).toString()));
				
			} else {
				JOptionPane.showMessageDialog(this, "Choose Data to View", "Error", JOptionPane.INFORMATION_MESSAGE);
		} else if(e.getSource().equals(issueBtn)) {
			
		}
	}
}
